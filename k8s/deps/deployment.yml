#Deployment of Signaling server (RFC-8835)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: signaling-server-deployment
spec:
  selector:
    matchLabels:
      app: signaling-server
  template:
    metadata:
      labels:
        app: signaling-server
    spec:
      containers:
        - name: signaling-server-pod
          image: endienasg/webrtc-signaling-server:master
          ports:
            - containerPort: 8080
---
#Service (Networking) of Signaling server (RFC-8835) TODO: replace it with normal in-cluster solution)
apiVersion: v1
kind: Service
metadata:
  name: signaling-server-service
  labels:
    env: prod
    owner: endienasg
spec:
  type: NodePort
  selector:
    app: signaling-server
  ports:
    - name: http
      protocol: TCP
      port: 5000
      targetPort: 8080
      nodePort: 30007

---

#Deployment of Signaling server (RFC-8835)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: room-service-deployment
spec:
  selector:
    matchLabels:
      app: room-service
  template:
    metadata:
      labels:
        app: room-service
    spec:
      containers:
        - name: signaling-server-pod
          image: endienasg/web-rtc-room-service:master
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: postgres_url
              valueFrom:
                secretKeyRef:
                  key: pg-url
                  name: postgres-secret
            - name: postgres_user
              valueFrom:
                secretKeyRef:
                  key: pg-user
                  name: postgres-secret
            - name: postgres_password
              valueFrom:
                secretKeyRef:
                  key: pg-password
                  name: postgres-secret
---
#Service (Networking) of Room server (TODO: replace it with normal in-cluster solution)
apiVersion: v1
kind: Service
metadata:
  name: room-service-service
  labels:
    env: prod
    owner: endienasg
spec:
  type: NodePort
  selector:
    app: room-service
  ports:
    - name: http
      protocol: TCP
      port: 5000
      targetPort: 8080
      nodePort: 30009

---
#Deployment (Database) #TODO: Temporally, we must replace with Patroni or any cluster solution for databases
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:16
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: pg-db
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: pg-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: pg-password

          volumeMounts:
            - mountPath: "/var/lib/postgresql/data"
              name: "mendix-pgdata"
      volumes:
        - hostPath:
            path: "/home/docker/pgdata"
          name: mendix-pgdata


  selector:
    matchLabels:
      app: postgres

---
#Service (Networking) of Database (Temporally TODO: replace it with normal in-cluster solution)
apiVersion: v1
kind: Service
metadata:
  name: webrtc-db-service
spec:
  type: NodePort
  selector:
    app: postgres
  ports:
    - name: http
      protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 30015

---
#Deployment (WebClient)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-client-deployment
spec:
  selector:
    matchLabels:
      app: web-client
  template:
    metadata:
      labels:
        app: web-client
    spec:
      containers:
        - name: signaling-server-pod
          image: endienasg/webrtc-web:master
          ports:
            - containerPort: 3000
---
#Service (Networking) of WebClient (Temporally TODO: replace it with normal in-cluster solution + https)
apiVersion: v1
kind: Service
metadata:
  name: web-client-service
spec:
  type: NodePort
  selector:
    app: web-client
  ports:
    - name: http
      protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 30008